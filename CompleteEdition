;if state:

0 0 b r c1
0 1 x r c_2
0 x x r c_1000
0 b b r c_2000
0 @ @ r c_1001

c1 * * r c1 
c1 _ @ r c11
c1 @ @ r c11
c11 0 b l c111
c11 b b r c11
c11 x x r c11
c11 1 1 * c_1000
c111 * * l c111 
c111 @ @ l c1111 
c1111 * * l c1111  
c1111 b b r 0

c_2 * * r c_2
c_2 _ @ r c22
c_2 @ @ r c22
c22 x x r c22
c22 b b r c22
c22 1 x l c222
c22 0 0 * c_2000
c222 * * l c222
c222 @ @ l c2222
c2222 * * l c2222
c2222 x x r 0


c_1001 b 0 r c_1001
c_1001 x 1 r c_1001
c_1001 _ _ l c_1000

c_1000 1 1 l c_1000
c_1000 0 0 l c_1000
c_1000 @ % l c_1000
c_1000 b 0 l c_1000
c_1000 x 1 l c_1000
c_1000 _ _ r c_10000

c_10000 * * r c_10000
c_10000 % % r s0

c_2000 1 1 l c_2000
c_2000 0 0 l c_2000
c_2000 @ _ l c_2000
c_2000 b 0 l c_2000
c_2000 x 1 l c_2000
c_2000 _ _ r c_20000

c_20000 0 0 * place#
c_20000 1 1 * place#

;x>y:


place# * * r place#
place# _ # l plcopy

;copying hell
plcopy * * l plcopy
plcopy _ @ r copy


copy * * r copy
copy # # l putcopy
copy a a l putcopy
copy b b l putcopy

abtonum a 1 r abtonum
abtonum b 0 r abtonum
abtonum # # r tosym

putcopy 1 a * put1copy
putcopy 0 b * put0copy
putcopy @ @ r abtonum


put1copy * * l put1copy
put1copy _ i r copy

put0copy * * l put0copy
put0copy _ j r copy

tosym 0 n r tosym
tosym 1 m r tosym
tosym _ | r place1

;first 1 after #
place1 _ 1 l place1
place1 | | l substract1


substract1 0 1 l substract1
substract1 1 0 r goto#
substract1 @ @ * gotostart
substract1 * * l substract1

goto# * * r goto#
goto# # # r mult2

mult2 * * r mult2
mult2 _ 0 r gotosub

gotosub * * l gotosub
gotosub # # l substract1

gotostart * * l gotostart
gotostart _ _ r restore

restore i _ r restorei
restore j _ r restorej
restore @ _ r tonums

restorei * i r gotostart
restorei @ @ r restorei
restorei j j r restorei
restorei i i r restorei

restorej * j r gotostart
restorej @ @ r restorej
restorej j j r restorej
restorej i i r restorej

tonums i 1 r tonums
tonums j 0 r tonums
tonums # _ r mnto01

mnto01 n 0 r mnto01
mnto01 m 1 r mnto01
mnto01 | _ * halt

;x<=y


; Rule 1: First we write "x" then "y"
; Rule 2: Both variables in bits form must have equal length 
; Rule 3: "y" variable must have one "0" symbol before first "1" symbol
; TestA x = 1001001 y = 0111101 answer = 11000011
; TestB x = 0110110 y = 0101110 answer = 10010010

; Multipluing "y" by 2:
0 _ % r s0
0 * * r 0 

s0 0 * r s1o
s0 1 0 l s1i
s0 _ _ * halt-reject     ; Empty input

; State 1o, 1i: Second check next symbols for shifting the bits to left 
s1o _ * l a1
s1o 1 0 l s1i
s1o 0 * r s1o

s1i _ 1 r s0
s1i 0 1 r s0

; Back to the start
a1 _ * r 1
a1 * * l a1

; Copying (setting markers):
1 1 * r c2
1 0 * r c2
1 _ * * hault-reject

c2 _ ! l c3
c2 * * r c2

c3 _ ^ r c0
c3 * * l c3

; Copying (replacing with x and y and moving copies to the left):

c0 ! * l yc1
c0 * * r c0

yc1 1 x l yc1_1
yc1 0 y l yc1_0
yc1 % * l xc0

yc1_1 _ 1 r yc2
yc1_1 * * l yc1_1

yc1_0 _ 0 r yc2
yc1_0 * * l yc1_0

yc2 x * l yc1
yc2 y * l yc1
yc2 * * r yc2

xc0 _ # r xc0_5
xc0 * * l xc0

xc0_5 % * l xc1
xc0_5 * * r xc0_5

xc1 1 x l xc1_1
xc1 0 y l xc1_0
xc1 ^ * r backToBits

xc1_1 _ 1 r xc2
xc1_1 * * l xc1_1

xc1_0 _ 0 r xc2
xc1_0 * * l xc1_0

xc2 x * l xc1
xc2 y * l xc1
xc2 * * r xc2

backToBits ! * l moveToOperatedCopy
backToBits x 1 r backToBits
backToBits y 0 r backToBits
backToBits * * r backToBits

moveToOperatedCopy ^ * l startArythm
moveToOperatedCopy * * l moveToOperatedCopy

; Addition of (2 * y) and x

startArythm 0 y l zeroArythm
startArythm 1 x l oneArythm
startArythm # * * moveCypheredAnswer

zeroArythm # * l zero#Logic
zeroArythm * * l zeroArythm 

zero#Logic x * l zero#Logic
zero#Logic y * l zero#Logic
zero#Logic 1 x r goBackBefore#
zero#Logic 0 y r goBackBefore#


oneArythm # * l one#Logic
oneArythm * * l oneArythm

one#Logic x * l one#Logic
one#Logic y * l one#Logic
one#Logic 0 x r goBackBefore#
one#Logic 1 y l OneOneCaseHandle

OneOneCaseHandle 1 0 l OneOneCaseHandle
OneOneCaseHandle 0 1 r goBackBefore#
OneOneCaseHandle _ x r goBackBefore#

goBackBefore# # * r goBack
goBackBefore# * * r goBackBefore#

goBack x * l startArythm
goBack y * l startArythm
goBack * * r goBack

moveCypheredAnswer _ * r carryAnswerAfter! 
moveCypheredAnswer * * l moveCypheredAnswer 

carryAnswerAfter! x _ * moveXToRight
carryAnswerAfter! y _ * moveYToRight
carryAnswerAfter! # * * cleanBefore^

moveXToRight ! * * placeXAfter!AndDecypher
moveXToRight * * r moveXToRight

placeXAfter!AndDecypher _ 1 l moveCypheredAnswer
placeXAfter!AndDecypher * * r placeXAfter!AndDecypher

moveYToRight ! * * placeYAfter!AndDecypher
moveYToRight * * r moveYToRight

placeYAfter!AndDecypher _ 0 l moveCypheredAnswer
placeYAfter!AndDecypher * * r placeYAfter!AndDecypher

cleanBefore^ 0 * * goInEnd
cleanBefore^ 1 * * goInEnd
cleanBefore^ * _ r cleanBefore^

goInEnd _ * l clear%And!
goInEnd * * r goInEnd

clear%And! % _ r getoToEndOfY
clear%And! ! _ l clear%And!
clear%And! _ * r return
clear%And! * * l clear%And!

getoToEndOfY _ * l divideBy2ToGetInitialY
getoToEndOfY * * r getoToEndOfY

divideBy2ToGetInitialY 0 * l divideBy2ToGetInitialY
divideBy2ToGetInitialY 1 0 r replacer
divideBy2ToGetInitialY _ * l return

replacer 0 1 l divideBy2ToGetInitialY

return _ * r halt-accept
return * * l return
